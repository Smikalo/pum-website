// ---------- Datasource ----------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Client Generator ----------
generator client {
  provider = "prisma-client-js"
}

// ---------- Enums ----------
enum Role {
  MEMBER
  MODERATOR
  ADMIN
}

// ---------- Models ----------
model User {
  id           String     @id @default(cuid())
  email        String     @unique
  passwordHash String
  role         Role       @default(MEMBER)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  /// 1–1 relation to Member.
  /// The FK lives here, so it MUST be unique to guarantee 1–1.
  /// (Nullable is fine on Postgres; multiple NULLs are allowed in unique indexes.)
  member       Member?    @relation("UserMember", fields: [memberId], references: [id])
  memberId     String?    @unique

  sessions   Session[]
  auditLogs  AuditLog[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}

model Member {
  id        String    @id @default(cuid())
  slug      String    @unique
  name      String
  avatarUrl String?
  headline  String?
  bio       String?

  // Postgres array columns; annotate base type with @db.Text
  skills    String[]  @db.Text
  techStack String[]  @db.Text

  links     Json?
  photos    String[]  @db.Text

  /// Back-side of the 1–1 relation to User
  user         User?   @relation("UserMember")

  projectLinks ProjectMember[]
  eventLinks   EventMember[]
  achievements UserAchievement[]
  blogPosts    BlogPost[]

  // FTS tsvector + GIN are added via raw SQL in the seed script
}

model Project {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  summary   String?
  cover     String?
  year      Int?

  tech      String[] @db.Text
  tags      String[] @db.Text
  links     Json?

  members   ProjectMember[]
  events    Event[]
  createdAt DateTime @default(now())
}

model ProjectMember {
  id        String  @id @default(cuid())
  projectId String
  memberId  String
  role      String?

  project   Project @relation(fields: [projectId], references: [id])
  member    Member  @relation(fields: [memberId], references: [id])

  @@unique([projectId, memberId])
  @@index([memberId])
  @@index([projectId])
}

model Event {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  city      String?
  country   String?
  lat       Float?
  lng       Float?
  dateStart DateTime?
  dateEnd   DateTime?

  tags      String[] @db.Text
  images    String[] @db.Text

  projects  Project[]
  members   EventMember[]
}

model EventMember {
  id       String  @id @default(cuid())
  eventId  String
  memberId String
  role     String?

  event    Event   @relation(fields: [eventId], references: [id])
  member   Member  @relation(fields: [memberId], references: [id])

  @@unique([eventId, memberId])
  @@index([memberId])
  @@index([eventId])
}

model BlogPost {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  bodyMd    String
  authorId  String
  author    Member   @relation(fields: [authorId], references: [id])
  tags      String[] @db.Text
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Achievement {
  id          String             @id @default(cuid())
  slug        String             @unique
  name        String
  description String?
  iconUrl     String?
  createdById String?

  /// Back-relation required by Prisma to complete the link
  awards      UserAchievement[]
}

model UserAchievement {
  id            String        @id @default(cuid())
  memberId      String
  achievementId String
  awardedById   String?
  awardedAt     DateTime      @default(now())

  member        Member        @relation(fields: [memberId], references: [id])
  achievement   Achievement   @relation(fields: [achievementId], references: [id])

  @@unique([memberId, achievementId])
  @@index([memberId])
  @@index([achievementId])
}

model Invite {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  role      Role     @default(MEMBER)
  createdBy String
  usedAt    DateTime?
  expiresAt DateTime

  @@index([email])
  @@index([token])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  ip         String?
  userAgent  String?
  action     String
  entityType String
  entityId   String?
  diff       Json?
  createdAt  DateTime @default(now())

  user       User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
}
